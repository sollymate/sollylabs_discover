import 'package:sollylabs_discover/global/globals.dart';
import 'package:sollylabs_discover/database/models/invitation.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:uuid/uuid.dart';
import 'package:sollylabs_discover/database/models/project_permission.dart';

class InvitationService {
  // Method to create an invitation
  Future<Invitation> createInvitation({
    required String projectId,
    required String senderId,
    required String recipientEmail,
    required String role,
  }) async {
    final invitation = Invitation(
      id: UuidValue.fromString(const Uuid().v4()),
      projectId: UuidValue.fromString(projectId),
      senderId: senderId,
      recipientEmail: recipientEmail,
      role: role,
      status: InvitationStatus.pending,
      createdAt: DateTime.now(),
    );

    final response = await globals.supabaseClient
        .from('invitations')
        .insert(invitation.toJson())
        .select();
    return Invitation.fromJson(response[0]);
  }

  // Method to get an invitation by ID
  Future<Invitation> getInvitation(String id) async {
    final response =
    await globals.supabaseClient.from('invitations').select().eq('id', id).single();
    return Invitation.fromJson(response);
  }

  // Method to update the status of an invitation
  Future<Invitation> updateInvitationStatus(
      String id, InvitationStatus status) async {
    final response = await globals.supabaseClient
        .from('invitations')
        .update({'status': status.toString().split('.').last})
        .eq('id', id)
        .select();
    return Invitation.fromJson(response[0]);
  }

  // Method to delete an invitation
  Future<void> deleteInvitation(String id) async {
    await globals.supabaseClient.from('invitations').delete().eq('id', id);
  }

  // Method to get all invitations for a user by email
  Future<List<Invitation>> getInvitationsForUser(String email) async {
    final response = await globals.supabaseClient
        .from('invitations')
        .select()
        .eq('recipient_email', email);
    List<Invitation> invitations = [];
    for (final invitation in response) {
      invitations.add(Invitation.fromJson(invitation));
    }
    return invitations;
  }

  // Method to handle invitation acceptance
  Future<void> acceptInvitation(String invitationId) async {
    final invitation = await getInvitation(invitationId);
    final projectPermission = ProjectPermission(
      id: UuidValue.fromString(const Uuid().v4()),
      projectId: invitation.projectId,
      userId: UuidValue.fromString(globals.supabaseClient.auth.currentUser!.id),
      role: invitation.role,
      createdAt: DateTime.now(),
    );
    await createProjectPermission(projectPermission);
    await updateInvitationStatus(invitationId, InvitationStatus.accepted);
  }

  Future<ProjectPermission> createProjectPermission(
      ProjectPermission projectPermission) async {
    final response = await globals.supabaseClient
        .from('project_permissions')
        .insert(projectPermission.toJson())
        .select();
    return ProjectPermission.fromJson(response[0]);
  }
}